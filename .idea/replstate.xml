<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1411314022386">{:repl-history {:ide [], :local [&quot;(run-server handler {:port 8080 :ip  \&quot;192.168.4.4\&quot;})&quot; &quot;(run-server handler {:port 8080 :ip})&quot; &quot;(run-server handler {:port 8080})&quot; &quot;(def x 3)&quot; &quot;(defn y []\n  (+ x 1))&quot; &quot;(def x 4)&quot; &quot;(y)&quot; &quot;(ns learn-http-kit.core\n  (:use org.httpkit.server\n        ring.util.response))\n\n(defn handler [request]\n  (response \&quot;Well, it sames that you made it.\&quot;))\n\n(run-server handler {:port 8080})&quot; &quot;(ns learn-http-kit.core\n  (:use org.httpkit.server\n        ring.util.response))&quot; &quot;(defn handler [request]\n  (response \&quot;Well, it sames that you made it.\&quot;))&quot; &quot;a&quot; &quot;(a)&quot; &quot;(def a (run-server handler {:port 8080}))&quot; &quot;(main)&quot; &quot;(close-server)&quot; &quot;(response \&quot;Well, it sames that you made it,hehe\&quot;)&quot; &quot;(defn handler [request]\n  (response \&quot;Well, it sames that you made it,hehe\&quot;))&quot; &quot;(defn handler [request]\n  (response \&quot;Well, it sames that you made it\&quot;))&quot; &quot;(def a 3)&quot; &quot;(defn b []\n  (+ a 1))&quot; &quot;(defn c []\n  (+ (b) 1))&quot; &quot;(def a 6)&quot; &quot;(c)&quot; &quot;(defn -main []\n  (reset! server (run-server #'handler {:port 8080})))&quot; &quot;(ns learn-http-kit.core\n  (:use org.httpkit.server\n        ring.util.response))\n\n(defn handler [request]\n  (with-channel req channel\n    (on-close channel (fn [status]\n                        (println \&quot;The status is: \&quot; status \&quot;, channel closed\&quot;)))\n    (if (websocket? channel)\n      (println \&quot;websocket channel\&quot;)\n      (println \&quot;http channel\&quot;))\n    (on-receive channel (fn [data]\n                          (send! channel data)))))\n\n\n(defonce server (atom nil))\n\n(defn close-server\n  []\n  (when-not (nil? @server)\n    (@server :timeout 100)\n    (reset! server nil)))&quot; &quot;(defn handler [request]\n  (with-channel req channel\n    (on-close channel (fn [status]\n                        (println \&quot;The status is: \&quot; status \&quot;, channel closed\&quot;)))\n    (if (websocket? channel)\n      (println \&quot;websocket channel\&quot;)\n      (println \&quot;http channel\&quot;))\n    (on-receive channel (fn [data]\n                          (send! channel data)))))&quot; &quot;\&quot;hello\&quot;&quot; &quot;j                                                           ;j;&quot; &quot;channel&quot; &quot;(send \&quot;hello\&quot;)&quot; &quot;(send! @a \&quot;hello\&quot;)&quot; &quot;(send! @a \&quot;b\&quot;)&quot; &quot;(send! @a \&quot;太奇葩了！\&quot; false)&quot; &quot;(send! @a \&quot;不信这个邪！\&quot; false)&quot; &quot;(send! @a \&quot;哈哈哈太好玩了！\&quot; false)&quot; &quot;(send! @a \&quot;这可真是有趣啊！\&quot; false)&quot; &quot;(send! @a \&quot;&lt;h1&gt;牛逼不牛逼？&lt;/h1&gt;\&quot; false)&quot; &quot;(close @a)&quot; &quot;(-main)&quot; &quot;(send! @a \&quot;happy\&quot; false)&quot;], :remote []}}</component>
</project>

